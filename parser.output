Terminals unused in grammar

   ERROR
   COMMENT


State 7 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: global_decl_list

    2 global_decl_list: global_decl_list global_decl
    3                 | %empty

    4 global_decl: function_decl
    5            | decl

    6 function_decl: type ID MK_LPAREN parameter_list MK_RPAREN MK_LBRACE block MK_RBRACE
    7              | type ID MK_LPAREN parameter_list MK_RPAREN MK_SEMICOLON

    8 parameter_list: parameter parameter_tail
    9               | %empty

   10 parameter_tail: MK_COMMA parameter parameter_tail
   11               | %empty

   12 parameter: type ID parameter_bracket_chain

   13 parameter_bracket_chain: MK_LB MK_RB bracket_chain
   14                        | bracket_chain

   15 block: decl block
   16      | typedef_decl block
   17      | statement block
   18      | %empty

   19 decl: type id_list MK_SEMICOLON
   20     | type ID OP_ASSIGN expression MK_SEMICOLON
   21     | typedef
   22     | struct_def

   23 bracket_chain: MK_LB NUM_INT MK_RB bracket_chain
   24              | %empty

   25 id_list: ID bracket_chain id_tail

   26 id_tail: MK_COMMA ID bracket_chain id_tail
   27        | %empty

   28 type: INT
   29     | FLOAT
   30     | VOID

   31 typedef: TYPEDEF type ID MK_SEMICOLON

   32 typedef_decl: ID id_list MK_SEMICOLON

   33 struct_def: STRUCT ID struct_block MK_SEMICOLON
   34           | STRUCT ID struct_block id_list MK_SEMICOLON
   35           | STRUCT struct_block id_list MK_SEMICOLON
   36           | TYPEDEF STRUCT ID struct_block MK_SEMICOLON

   37 struct_block: MK_LBRACE decl_list MK_RBRACE
   38             | %empty

   39 decl_list: decl decl_list
   40          | typedef_decl decl_list
   41          | %empty

   42 statement: expression_statement
   43          | assignment_statement
   44          | control_statement
   45          | RETURN MK_SEMICOLON
   46          | RETURN expression MK_SEMICOLON

   47 expression_statement: expression MK_SEMICOLON

   48 assignment_statement: assignment MK_SEMICOLON

   49 assignment: var OP_ASSIGN expression

   50 reference_bracket_chain: MK_LB expression MK_RB reference_bracket_chain
   51                        | MK_LB expression MK_RB

   52 function_call: ID MK_LPAREN expression_list MK_RPAREN

   53 expression_list: expression expression_tail
   54                | %empty

   55 expression_tail: MK_COMMA expression expression_tail
   56                | %empty

   57 expression: expression OP_OR and_op_res
   58           | and_op_res

   59 and_op_res: and_op_res OP_AND comp_op_res
   60           | comp_op_res

   61 comp_op_res: comp_op_res comp_op add_op_res
   62            | add_op_res

   63 add_op_res: add_op_res add_op mul_op_res
   64           | mul_op_res

   65 mul_op_res: mul_op_res mul_op unary_op_res
   66           | unary_op_res

   67 unary_op_res: OP_MINUS factor
   68             | OP_NOT factor
   69             | factor

   70 factor: NUM_INT
   71       | NUM_FLOAT
   72       | STRING
   73       | var
   74       | MK_LPAREN expression MK_RPAREN
   75       | function_call

   76 var: ID
   77    | array
   78    | struct_ref

   79 array: ID reference_bracket_chain

   80 struct_ref: ID MK_DOT ID
   81           | ID MK_DOT array
   82           | array MK_DOT ID
   83           | array MK_DOT array

   84 add_op: OP_PLUS
   85       | OP_MINUS

   86 mul_op: OP_TIMES
   87       | OP_DIVIDE

   88 comp_op: OP_EQ
   89        | OP_NE
   90        | OP_LT
   91        | OP_GT
   92        | OP_LE
   93        | OP_GE

   94 control_statement: if_statement
   95                  | for_statement
   96                  | while_statement

   97 if_statement: IF MK_LPAREN expression MK_RPAREN MK_LBRACE block MK_RBRACE if_tail

   98 if_tail: ELSE MK_LBRACE block MK_RBRACE
   99        | %empty

  100 for_statement: FOR MK_LPAREN assignment_statement expression_statement assignment MK_RPAREN MK_LBRACE block MK_RBRACE

  101 while_statement: WHILE MK_LPAREN expression_list MK_RPAREN MK_LBRACE block MK_RBRACE


Terminals, with rules where they appear

$end (0) 0
error (256)
ID (258) 6 7 12 20 25 26 31 32 33 34 36 52 76 79 80 81 82
NUM_INT (259) 23 70
NUM_FLOAT (260) 71
STRING (261) 72
VOID (262) 30
INT (263) 28
FLOAT (264) 29
IF (265) 97
ELSE (266) 98
WHILE (267) 101
FOR (268) 100
STRUCT (269) 33 34 35 36
TYPEDEF (270) 31 36
OP_ASSIGN (271) 20 49
OP_OR (272) 57
OP_AND (273) 59
OP_NOT (274) 68
OP_EQ (275) 88
OP_NE (276) 89
OP_GT (277) 91
OP_LT (278) 90
OP_GE (279) 93
OP_LE (280) 92
OP_PLUS (281) 84
OP_MINUS (282) 67 85
OP_TIMES (283) 86
OP_DIVIDE (284) 87
MK_LB (285) 13 23 50 51
MK_RB (286) 13 23 50 51
MK_LPAREN (287) 6 7 52 74 97 100 101
MK_RPAREN (288) 6 7 52 74 97 100 101
MK_LBRACE (289) 6 37 97 98 100 101
MK_RBRACE (290) 6 37 97 98 100 101
MK_COMMA (291) 10 26 55
MK_SEMICOLON (292) 7 19 20 31 32 33 34 35 36 45 46 47 48
MK_DOT (293) 80 81 82 83
ERROR (294)
RETURN (295) 45 46
COMMENT (296)


Nonterminals, with rules where they appear

$accept (42)
    on left: 0
program (43)
    on left: 1, on right: 0
global_decl_list (44)
    on left: 2 3, on right: 1 2
global_decl (45)
    on left: 4 5, on right: 2
function_decl (46)
    on left: 6 7, on right: 4
parameter_list (47)
    on left: 8 9, on right: 6 7
parameter_tail (48)
    on left: 10 11, on right: 8 10
parameter (49)
    on left: 12, on right: 8 10
parameter_bracket_chain (50)
    on left: 13 14, on right: 12
block (51)
    on left: 15 16 17 18, on right: 6 15 16 17 97 98 100 101
decl (52)
    on left: 19 20 21 22, on right: 5 15 39
bracket_chain (53)
    on left: 23 24, on right: 13 14 23 25 26
id_list (54)
    on left: 25, on right: 19 32 34 35
id_tail (55)
    on left: 26 27, on right: 25 26
type (56)
    on left: 28 29 30, on right: 6 7 12 19 20 31
typedef (57)
    on left: 31, on right: 21
typedef_decl (58)
    on left: 32, on right: 16 40
struct_def (59)
    on left: 33 34 35 36, on right: 22
struct_block (60)
    on left: 37 38, on right: 33 34 35 36
decl_list (61)
    on left: 39 40 41, on right: 37 39 40
statement (62)
    on left: 42 43 44 45 46, on right: 17
expression_statement (63)
    on left: 47, on right: 42 100
assignment_statement (64)
    on left: 48, on right: 43 100
assignment (65)
    on left: 49, on right: 48 100
reference_bracket_chain (66)
    on left: 50 51, on right: 50 79
function_call (67)
    on left: 52, on right: 75
expression_list (68)
    on left: 53 54, on right: 52 101
expression_tail (69)
    on left: 55 56, on right: 53 55
expression (70)
    on left: 57 58, on right: 20 46 47 49 50 51 53 55 57 74 97
and_op_res (71)
    on left: 59 60, on right: 57 58 59
comp_op_res (72)
    on left: 61 62, on right: 59 60 61
add_op_res (73)
    on left: 63 64, on right: 61 62 63
mul_op_res (74)
    on left: 65 66, on right: 63 64 65
unary_op_res (75)
    on left: 67 68 69, on right: 65 66
factor (76)
    on left: 70 71 72 73 74 75, on right: 67 68 69
var (77)
    on left: 76 77 78, on right: 49 73
array (78)
    on left: 79, on right: 77 81 82 83
struct_ref (79)
    on left: 80 81 82 83, on right: 78
add_op (80)
    on left: 84 85, on right: 63
mul_op (81)
    on left: 86 87, on right: 65
comp_op (82)
    on left: 88 89 90 91 92 93, on right: 61
control_statement (83)
    on left: 94 95 96, on right: 44
if_statement (84)
    on left: 97, on right: 94
if_tail (85)
    on left: 98 99, on right: 97
for_statement (86)
    on left: 100, on right: 95
while_statement (87)
    on left: 101, on right: 96


State 0

    0 $accept: . program $end

    $default  reduce using rule 3 (global_decl_list)

    program           go to state 1
    global_decl_list  go to state 2


State 1

    0 $accept: program . $end

    $end  shift, and go to state 3


State 2

    1 program: global_decl_list .
    2 global_decl_list: global_decl_list . global_decl

    VOID     shift, and go to state 4
    INT      shift, and go to state 5
    FLOAT    shift, and go to state 6
    STRUCT   shift, and go to state 7
    TYPEDEF  shift, and go to state 8

    $default  reduce using rule 1 (program)

    global_decl    go to state 9
    function_decl  go to state 10
    decl           go to state 11
    type           go to state 12
    typedef        go to state 13
    struct_def     go to state 14


State 3

    0 $accept: program $end .

    $default  accept


State 4

   30 type: VOID .

    $default  reduce using rule 30 (type)


State 5

   28 type: INT .

    $default  reduce using rule 28 (type)


State 6

   29 type: FLOAT .

    $default  reduce using rule 29 (type)


State 7

   33 struct_def: STRUCT . ID struct_block MK_SEMICOLON
   34           | STRUCT . ID struct_block id_list MK_SEMICOLON
   35           | STRUCT . struct_block id_list MK_SEMICOLON

    ID         shift, and go to state 15
    MK_LBRACE  shift, and go to state 16

    ID  [reduce using rule 38 (struct_block)]

    struct_block  go to state 17


State 8

   31 typedef: TYPEDEF . type ID MK_SEMICOLON
   36 struct_def: TYPEDEF . STRUCT ID struct_block MK_SEMICOLON

    VOID    shift, and go to state 4
    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    STRUCT  shift, and go to state 18

    type  go to state 19


State 9

    2 global_decl_list: global_decl_list global_decl .

    $default  reduce using rule 2 (global_decl_list)


State 10

    4 global_decl: function_decl .

    $default  reduce using rule 4 (global_decl)


State 11

    5 global_decl: decl .

    $default  reduce using rule 5 (global_decl)


State 12

    6 function_decl: type . ID MK_LPAREN parameter_list MK_RPAREN MK_LBRACE block MK_RBRACE
    7              | type . ID MK_LPAREN parameter_list MK_RPAREN MK_SEMICOLON
   19 decl: type . id_list MK_SEMICOLON
   20     | type . ID OP_ASSIGN expression MK_SEMICOLON

    ID  shift, and go to state 20

    id_list  go to state 21


State 13

   21 decl: typedef .

    $default  reduce using rule 21 (decl)


State 14

   22 decl: struct_def .

    $default  reduce using rule 22 (decl)


State 15

   33 struct_def: STRUCT ID . struct_block MK_SEMICOLON
   34           | STRUCT ID . struct_block id_list MK_SEMICOLON

    MK_LBRACE  shift, and go to state 16

    $default  reduce using rule 38 (struct_block)

    struct_block  go to state 22


State 16

   37 struct_block: MK_LBRACE . decl_list MK_RBRACE

    ID       shift, and go to state 23
    VOID     shift, and go to state 4
    INT      shift, and go to state 5
    FLOAT    shift, and go to state 6
    STRUCT   shift, and go to state 7
    TYPEDEF  shift, and go to state 8

    $default  reduce using rule 41 (decl_list)

    decl          go to state 24
    type          go to state 25
    typedef       go to state 13
    typedef_decl  go to state 26
    struct_def    go to state 14
    decl_list     go to state 27


State 17

   35 struct_def: STRUCT struct_block . id_list MK_SEMICOLON

    ID  shift, and go to state 28

    id_list  go to state 29


State 18

   36 struct_def: TYPEDEF STRUCT . ID struct_block MK_SEMICOLON

    ID  shift, and go to state 30


State 19

   31 typedef: TYPEDEF type . ID MK_SEMICOLON

    ID  shift, and go to state 31


State 20

    6 function_decl: type ID . MK_LPAREN parameter_list MK_RPAREN MK_LBRACE block MK_RBRACE
    7              | type ID . MK_LPAREN parameter_list MK_RPAREN MK_SEMICOLON
   20 decl: type ID . OP_ASSIGN expression MK_SEMICOLON
   25 id_list: ID . bracket_chain id_tail

    OP_ASSIGN  shift, and go to state 32
    MK_LB      shift, and go to state 33
    MK_LPAREN  shift, and go to state 34

    $default  reduce using rule 24 (bracket_chain)

    bracket_chain  go to state 35


State 21

   19 decl: type id_list . MK_SEMICOLON

    MK_SEMICOLON  shift, and go to state 36


State 22

   33 struct_def: STRUCT ID struct_block . MK_SEMICOLON
   34           | STRUCT ID struct_block . id_list MK_SEMICOLON

    ID            shift, and go to state 28
    MK_SEMICOLON  shift, and go to state 37

    id_list  go to state 38


State 23

   32 typedef_decl: ID . id_list MK_SEMICOLON

    ID  shift, and go to state 28

    id_list  go to state 39


State 24

   39 decl_list: decl . decl_list

    ID       shift, and go to state 23
    VOID     shift, and go to state 4
    INT      shift, and go to state 5
    FLOAT    shift, and go to state 6
    STRUCT   shift, and go to state 7
    TYPEDEF  shift, and go to state 8

    $default  reduce using rule 41 (decl_list)

    decl          go to state 24
    type          go to state 25
    typedef       go to state 13
    typedef_decl  go to state 26
    struct_def    go to state 14
    decl_list     go to state 40


State 25

   19 decl: type . id_list MK_SEMICOLON
   20     | type . ID OP_ASSIGN expression MK_SEMICOLON

    ID  shift, and go to state 41

    id_list  go to state 21


State 26

   40 decl_list: typedef_decl . decl_list

    ID       shift, and go to state 23
    VOID     shift, and go to state 4
    INT      shift, and go to state 5
    FLOAT    shift, and go to state 6
    STRUCT   shift, and go to state 7
    TYPEDEF  shift, and go to state 8

    $default  reduce using rule 41 (decl_list)

    decl          go to state 24
    type          go to state 25
    typedef       go to state 13
    typedef_decl  go to state 26
    struct_def    go to state 14
    decl_list     go to state 42


State 27

   37 struct_block: MK_LBRACE decl_list . MK_RBRACE

    MK_RBRACE  shift, and go to state 43


State 28

   25 id_list: ID . bracket_chain id_tail

    MK_LB  shift, and go to state 33

    $default  reduce using rule 24 (bracket_chain)

    bracket_chain  go to state 35


State 29

   35 struct_def: STRUCT struct_block id_list . MK_SEMICOLON

    MK_SEMICOLON  shift, and go to state 44


State 30

   36 struct_def: TYPEDEF STRUCT ID . struct_block MK_SEMICOLON

    MK_LBRACE  shift, and go to state 16

    $default  reduce using rule 38 (struct_block)

    struct_block  go to state 45


State 31

   31 typedef: TYPEDEF type ID . MK_SEMICOLON

    MK_SEMICOLON  shift, and go to state 46


State 32

   20 decl: type ID OP_ASSIGN . expression MK_SEMICOLON

    ID         shift, and go to state 47
    NUM_INT    shift, and go to state 48
    NUM_FLOAT  shift, and go to state 49
    STRING     shift, and go to state 50
    OP_NOT     shift, and go to state 51
    OP_MINUS   shift, and go to state 52
    MK_LPAREN  shift, and go to state 53

    function_call  go to state 54
    expression     go to state 55
    and_op_res     go to state 56
    comp_op_res    go to state 57
    add_op_res     go to state 58
    mul_op_res     go to state 59
    unary_op_res   go to state 60
    factor         go to state 61
    var            go to state 62
    array          go to state 63
    struct_ref     go to state 64


State 33

   23 bracket_chain: MK_LB . NUM_INT MK_RB bracket_chain

    NUM_INT  shift, and go to state 65


State 34

    6 function_decl: type ID MK_LPAREN . parameter_list MK_RPAREN MK_LBRACE block MK_RBRACE
    7              | type ID MK_LPAREN . parameter_list MK_RPAREN MK_SEMICOLON

    VOID   shift, and go to state 4
    INT    shift, and go to state 5
    FLOAT  shift, and go to state 6

    $default  reduce using rule 9 (parameter_list)

    parameter_list  go to state 66
    parameter       go to state 67
    type            go to state 68


State 35

   25 id_list: ID bracket_chain . id_tail

    MK_COMMA  shift, and go to state 69

    $default  reduce using rule 27 (id_tail)

    id_tail  go to state 70


State 36

   19 decl: type id_list MK_SEMICOLON .

    $default  reduce using rule 19 (decl)


State 37

   33 struct_def: STRUCT ID struct_block MK_SEMICOLON .

    $default  reduce using rule 33 (struct_def)


State 38

   34 struct_def: STRUCT ID struct_block id_list . MK_SEMICOLON

    MK_SEMICOLON  shift, and go to state 71


State 39

   32 typedef_decl: ID id_list . MK_SEMICOLON

    MK_SEMICOLON  shift, and go to state 72


State 40

   39 decl_list: decl decl_list .

    $default  reduce using rule 39 (decl_list)


State 41

   20 decl: type ID . OP_ASSIGN expression MK_SEMICOLON
   25 id_list: ID . bracket_chain id_tail

    OP_ASSIGN  shift, and go to state 32
    MK_LB      shift, and go to state 33

    $default  reduce using rule 24 (bracket_chain)

    bracket_chain  go to state 35


State 42

   40 decl_list: typedef_decl decl_list .

    $default  reduce using rule 40 (decl_list)


State 43

   37 struct_block: MK_LBRACE decl_list MK_RBRACE .

    $default  reduce using rule 37 (struct_block)


State 44

   35 struct_def: STRUCT struct_block id_list MK_SEMICOLON .

    $default  reduce using rule 35 (struct_def)


State 45

   36 struct_def: TYPEDEF STRUCT ID struct_block . MK_SEMICOLON

    MK_SEMICOLON  shift, and go to state 73


State 46

   31 typedef: TYPEDEF type ID MK_SEMICOLON .

    $default  reduce using rule 31 (typedef)


State 47

   52 function_call: ID . MK_LPAREN expression_list MK_RPAREN
   76 var: ID .
   79 array: ID . reference_bracket_chain
   80 struct_ref: ID . MK_DOT ID
   81           | ID . MK_DOT array

    MK_LB      shift, and go to state 74
    MK_LPAREN  shift, and go to state 75
    MK_DOT     shift, and go to state 76

    $default  reduce using rule 76 (var)

    reference_bracket_chain  go to state 77


State 48

   70 factor: NUM_INT .

    $default  reduce using rule 70 (factor)


State 49

   71 factor: NUM_FLOAT .

    $default  reduce using rule 71 (factor)


State 50

   72 factor: STRING .

    $default  reduce using rule 72 (factor)


State 51

   68 unary_op_res: OP_NOT . factor

    ID         shift, and go to state 47
    NUM_INT    shift, and go to state 48
    NUM_FLOAT  shift, and go to state 49
    STRING     shift, and go to state 50
    MK_LPAREN  shift, and go to state 53

    function_call  go to state 54
    factor         go to state 78
    var            go to state 62
    array          go to state 63
    struct_ref     go to state 64


State 52

   67 unary_op_res: OP_MINUS . factor

    ID         shift, and go to state 47
    NUM_INT    shift, and go to state 48
    NUM_FLOAT  shift, and go to state 49
    STRING     shift, and go to state 50
    MK_LPAREN  shift, and go to state 53

    function_call  go to state 54
    factor         go to state 79
    var            go to state 62
    array          go to state 63
    struct_ref     go to state 64


State 53

   74 factor: MK_LPAREN . expression MK_RPAREN

    ID         shift, and go to state 47
    NUM_INT    shift, and go to state 48
    NUM_FLOAT  shift, and go to state 49
    STRING     shift, and go to state 50
    OP_NOT     shift, and go to state 51
    OP_MINUS   shift, and go to state 52
    MK_LPAREN  shift, and go to state 53

    function_call  go to state 54
    expression     go to state 80
    and_op_res     go to state 56
    comp_op_res    go to state 57
    add_op_res     go to state 58
    mul_op_res     go to state 59
    unary_op_res   go to state 60
    factor         go to state 61
    var            go to state 62
    array          go to state 63
    struct_ref     go to state 64


State 54

   75 factor: function_call .

    $default  reduce using rule 75 (factor)


State 55

   20 decl: type ID OP_ASSIGN expression . MK_SEMICOLON
   57 expression: expression . OP_OR and_op_res

    OP_OR         shift, and go to state 81
    MK_SEMICOLON  shift, and go to state 82


State 56

   58 expression: and_op_res .
   59 and_op_res: and_op_res . OP_AND comp_op_res

    OP_AND  shift, and go to state 83

    $default  reduce using rule 58 (expression)


State 57

   60 and_op_res: comp_op_res .
   61 comp_op_res: comp_op_res . comp_op add_op_res

    OP_EQ  shift, and go to state 84
    OP_NE  shift, and go to state 85
    OP_GT  shift, and go to state 86
    OP_LT  shift, and go to state 87
    OP_GE  shift, and go to state 88
    OP_LE  shift, and go to state 89

    $default  reduce using rule 60 (and_op_res)

    comp_op  go to state 90


State 58

   62 comp_op_res: add_op_res .
   63 add_op_res: add_op_res . add_op mul_op_res

    OP_PLUS   shift, and go to state 91
    OP_MINUS  shift, and go to state 92

    $default  reduce using rule 62 (comp_op_res)

    add_op  go to state 93


State 59

   64 add_op_res: mul_op_res .
   65 mul_op_res: mul_op_res . mul_op unary_op_res

    OP_TIMES   shift, and go to state 94
    OP_DIVIDE  shift, and go to state 95

    $default  reduce using rule 64 (add_op_res)

    mul_op  go to state 96


State 60

   66 mul_op_res: unary_op_res .

    $default  reduce using rule 66 (mul_op_res)


State 61

   69 unary_op_res: factor .

    $default  reduce using rule 69 (unary_op_res)


State 62

   73 factor: var .

    $default  reduce using rule 73 (factor)


State 63

   77 var: array .
   82 struct_ref: array . MK_DOT ID
   83           | array . MK_DOT array

    MK_DOT  shift, and go to state 97

    $default  reduce using rule 77 (var)


State 64

   78 var: struct_ref .

    $default  reduce using rule 78 (var)


State 65

   23 bracket_chain: MK_LB NUM_INT . MK_RB bracket_chain

    MK_RB  shift, and go to state 98


State 66

    6 function_decl: type ID MK_LPAREN parameter_list . MK_RPAREN MK_LBRACE block MK_RBRACE
    7              | type ID MK_LPAREN parameter_list . MK_RPAREN MK_SEMICOLON

    MK_RPAREN  shift, and go to state 99


State 67

    8 parameter_list: parameter . parameter_tail

    MK_COMMA  shift, and go to state 100

    $default  reduce using rule 11 (parameter_tail)

    parameter_tail  go to state 101


State 68

   12 parameter: type . ID parameter_bracket_chain

    ID  shift, and go to state 102


State 69

   26 id_tail: MK_COMMA . ID bracket_chain id_tail

    ID  shift, and go to state 103


State 70

   25 id_list: ID bracket_chain id_tail .

    $default  reduce using rule 25 (id_list)


State 71

   34 struct_def: STRUCT ID struct_block id_list MK_SEMICOLON .

    $default  reduce using rule 34 (struct_def)


State 72

   32 typedef_decl: ID id_list MK_SEMICOLON .

    $default  reduce using rule 32 (typedef_decl)


State 73

   36 struct_def: TYPEDEF STRUCT ID struct_block MK_SEMICOLON .

    $default  reduce using rule 36 (struct_def)


State 74

   50 reference_bracket_chain: MK_LB . expression MK_RB reference_bracket_chain
   51                        | MK_LB . expression MK_RB

    ID         shift, and go to state 47
    NUM_INT    shift, and go to state 48
    NUM_FLOAT  shift, and go to state 49
    STRING     shift, and go to state 50
    OP_NOT     shift, and go to state 51
    OP_MINUS   shift, and go to state 52
    MK_LPAREN  shift, and go to state 53

    function_call  go to state 54
    expression     go to state 104
    and_op_res     go to state 56
    comp_op_res    go to state 57
    add_op_res     go to state 58
    mul_op_res     go to state 59
    unary_op_res   go to state 60
    factor         go to state 61
    var            go to state 62
    array          go to state 63
    struct_ref     go to state 64


State 75

   52 function_call: ID MK_LPAREN . expression_list MK_RPAREN

    ID         shift, and go to state 47
    NUM_INT    shift, and go to state 48
    NUM_FLOAT  shift, and go to state 49
    STRING     shift, and go to state 50
    OP_NOT     shift, and go to state 51
    OP_MINUS   shift, and go to state 52
    MK_LPAREN  shift, and go to state 53

    $default  reduce using rule 54 (expression_list)

    function_call    go to state 54
    expression_list  go to state 105
    expression       go to state 106
    and_op_res       go to state 56
    comp_op_res      go to state 57
    add_op_res       go to state 58
    mul_op_res       go to state 59
    unary_op_res     go to state 60
    factor           go to state 61
    var              go to state 62
    array            go to state 63
    struct_ref       go to state 64


State 76

   80 struct_ref: ID MK_DOT . ID
   81           | ID MK_DOT . array

    ID  shift, and go to state 107

    array  go to state 108


State 77

   79 array: ID reference_bracket_chain .

    $default  reduce using rule 79 (array)


State 78

   68 unary_op_res: OP_NOT factor .

    $default  reduce using rule 68 (unary_op_res)


State 79

   67 unary_op_res: OP_MINUS factor .

    $default  reduce using rule 67 (unary_op_res)


State 80

   57 expression: expression . OP_OR and_op_res
   74 factor: MK_LPAREN expression . MK_RPAREN

    OP_OR      shift, and go to state 81
    MK_RPAREN  shift, and go to state 109


State 81

   57 expression: expression OP_OR . and_op_res

    ID         shift, and go to state 47
    NUM_INT    shift, and go to state 48
    NUM_FLOAT  shift, and go to state 49
    STRING     shift, and go to state 50
    OP_NOT     shift, and go to state 51
    OP_MINUS   shift, and go to state 52
    MK_LPAREN  shift, and go to state 53

    function_call  go to state 54
    and_op_res     go to state 110
    comp_op_res    go to state 57
    add_op_res     go to state 58
    mul_op_res     go to state 59
    unary_op_res   go to state 60
    factor         go to state 61
    var            go to state 62
    array          go to state 63
    struct_ref     go to state 64


State 82

   20 decl: type ID OP_ASSIGN expression MK_SEMICOLON .

    $default  reduce using rule 20 (decl)


State 83

   59 and_op_res: and_op_res OP_AND . comp_op_res

    ID         shift, and go to state 47
    NUM_INT    shift, and go to state 48
    NUM_FLOAT  shift, and go to state 49
    STRING     shift, and go to state 50
    OP_NOT     shift, and go to state 51
    OP_MINUS   shift, and go to state 52
    MK_LPAREN  shift, and go to state 53

    function_call  go to state 54
    comp_op_res    go to state 111
    add_op_res     go to state 58
    mul_op_res     go to state 59
    unary_op_res   go to state 60
    factor         go to state 61
    var            go to state 62
    array          go to state 63
    struct_ref     go to state 64


State 84

   88 comp_op: OP_EQ .

    $default  reduce using rule 88 (comp_op)


State 85

   89 comp_op: OP_NE .

    $default  reduce using rule 89 (comp_op)


State 86

   91 comp_op: OP_GT .

    $default  reduce using rule 91 (comp_op)


State 87

   90 comp_op: OP_LT .

    $default  reduce using rule 90 (comp_op)


State 88

   93 comp_op: OP_GE .

    $default  reduce using rule 93 (comp_op)


State 89

   92 comp_op: OP_LE .

    $default  reduce using rule 92 (comp_op)


State 90

   61 comp_op_res: comp_op_res comp_op . add_op_res

    ID         shift, and go to state 47
    NUM_INT    shift, and go to state 48
    NUM_FLOAT  shift, and go to state 49
    STRING     shift, and go to state 50
    OP_NOT     shift, and go to state 51
    OP_MINUS   shift, and go to state 52
    MK_LPAREN  shift, and go to state 53

    function_call  go to state 54
    add_op_res     go to state 112
    mul_op_res     go to state 59
    unary_op_res   go to state 60
    factor         go to state 61
    var            go to state 62
    array          go to state 63
    struct_ref     go to state 64


State 91

   84 add_op: OP_PLUS .

    $default  reduce using rule 84 (add_op)


State 92

   85 add_op: OP_MINUS .

    $default  reduce using rule 85 (add_op)


State 93

   63 add_op_res: add_op_res add_op . mul_op_res

    ID         shift, and go to state 47
    NUM_INT    shift, and go to state 48
    NUM_FLOAT  shift, and go to state 49
    STRING     shift, and go to state 50
    OP_NOT     shift, and go to state 51
    OP_MINUS   shift, and go to state 52
    MK_LPAREN  shift, and go to state 53

    function_call  go to state 54
    mul_op_res     go to state 113
    unary_op_res   go to state 60
    factor         go to state 61
    var            go to state 62
    array          go to state 63
    struct_ref     go to state 64


State 94

   86 mul_op: OP_TIMES .

    $default  reduce using rule 86 (mul_op)


State 95

   87 mul_op: OP_DIVIDE .

    $default  reduce using rule 87 (mul_op)


State 96

   65 mul_op_res: mul_op_res mul_op . unary_op_res

    ID         shift, and go to state 47
    NUM_INT    shift, and go to state 48
    NUM_FLOAT  shift, and go to state 49
    STRING     shift, and go to state 50
    OP_NOT     shift, and go to state 51
    OP_MINUS   shift, and go to state 52
    MK_LPAREN  shift, and go to state 53

    function_call  go to state 54
    unary_op_res   go to state 114
    factor         go to state 61
    var            go to state 62
    array          go to state 63
    struct_ref     go to state 64


State 97

   82 struct_ref: array MK_DOT . ID
   83           | array MK_DOT . array

    ID  shift, and go to state 115

    array  go to state 116


State 98

   23 bracket_chain: MK_LB NUM_INT MK_RB . bracket_chain

    MK_LB  shift, and go to state 33

    $default  reduce using rule 24 (bracket_chain)

    bracket_chain  go to state 117


State 99

    6 function_decl: type ID MK_LPAREN parameter_list MK_RPAREN . MK_LBRACE block MK_RBRACE
    7              | type ID MK_LPAREN parameter_list MK_RPAREN . MK_SEMICOLON

    MK_LBRACE     shift, and go to state 118
    MK_SEMICOLON  shift, and go to state 119


State 100

   10 parameter_tail: MK_COMMA . parameter parameter_tail

    VOID   shift, and go to state 4
    INT    shift, and go to state 5
    FLOAT  shift, and go to state 6

    parameter  go to state 120
    type       go to state 68


State 101

    8 parameter_list: parameter parameter_tail .

    $default  reduce using rule 8 (parameter_list)


State 102

   12 parameter: type ID . parameter_bracket_chain

    MK_LB  shift, and go to state 121

    $default  reduce using rule 24 (bracket_chain)

    parameter_bracket_chain  go to state 122
    bracket_chain            go to state 123


State 103

   26 id_tail: MK_COMMA ID . bracket_chain id_tail

    MK_LB  shift, and go to state 33

    $default  reduce using rule 24 (bracket_chain)

    bracket_chain  go to state 124


State 104

   50 reference_bracket_chain: MK_LB expression . MK_RB reference_bracket_chain
   51                        | MK_LB expression . MK_RB
   57 expression: expression . OP_OR and_op_res

    OP_OR  shift, and go to state 81
    MK_RB  shift, and go to state 125


State 105

   52 function_call: ID MK_LPAREN expression_list . MK_RPAREN

    MK_RPAREN  shift, and go to state 126


State 106

   53 expression_list: expression . expression_tail
   57 expression: expression . OP_OR and_op_res

    OP_OR     shift, and go to state 81
    MK_COMMA  shift, and go to state 127

    $default  reduce using rule 56 (expression_tail)

    expression_tail  go to state 128


State 107

   79 array: ID . reference_bracket_chain
   80 struct_ref: ID MK_DOT ID .

    MK_LB  shift, and go to state 74

    $default  reduce using rule 80 (struct_ref)

    reference_bracket_chain  go to state 77


State 108

   81 struct_ref: ID MK_DOT array .

    $default  reduce using rule 81 (struct_ref)


State 109

   74 factor: MK_LPAREN expression MK_RPAREN .

    $default  reduce using rule 74 (factor)


State 110

   57 expression: expression OP_OR and_op_res .
   59 and_op_res: and_op_res . OP_AND comp_op_res

    OP_AND  shift, and go to state 83

    $default  reduce using rule 57 (expression)


State 111

   59 and_op_res: and_op_res OP_AND comp_op_res .
   61 comp_op_res: comp_op_res . comp_op add_op_res

    OP_EQ  shift, and go to state 84
    OP_NE  shift, and go to state 85
    OP_GT  shift, and go to state 86
    OP_LT  shift, and go to state 87
    OP_GE  shift, and go to state 88
    OP_LE  shift, and go to state 89

    $default  reduce using rule 59 (and_op_res)

    comp_op  go to state 90


State 112

   61 comp_op_res: comp_op_res comp_op add_op_res .
   63 add_op_res: add_op_res . add_op mul_op_res

    OP_PLUS   shift, and go to state 91
    OP_MINUS  shift, and go to state 92

    $default  reduce using rule 61 (comp_op_res)

    add_op  go to state 93


State 113

   63 add_op_res: add_op_res add_op mul_op_res .
   65 mul_op_res: mul_op_res . mul_op unary_op_res

    OP_TIMES   shift, and go to state 94
    OP_DIVIDE  shift, and go to state 95

    $default  reduce using rule 63 (add_op_res)

    mul_op  go to state 96


State 114

   65 mul_op_res: mul_op_res mul_op unary_op_res .

    $default  reduce using rule 65 (mul_op_res)


State 115

   79 array: ID . reference_bracket_chain
   82 struct_ref: array MK_DOT ID .

    MK_LB  shift, and go to state 74

    $default  reduce using rule 82 (struct_ref)

    reference_bracket_chain  go to state 77


State 116

   83 struct_ref: array MK_DOT array .

    $default  reduce using rule 83 (struct_ref)


State 117

   23 bracket_chain: MK_LB NUM_INT MK_RB bracket_chain .

    $default  reduce using rule 23 (bracket_chain)


State 118

    6 function_decl: type ID MK_LPAREN parameter_list MK_RPAREN MK_LBRACE . block MK_RBRACE

    ID         shift, and go to state 129
    NUM_INT    shift, and go to state 48
    NUM_FLOAT  shift, and go to state 49
    STRING     shift, and go to state 50
    VOID       shift, and go to state 4
    INT        shift, and go to state 5
    FLOAT      shift, and go to state 6
    IF         shift, and go to state 130
    WHILE      shift, and go to state 131
    FOR        shift, and go to state 132
    STRUCT     shift, and go to state 7
    TYPEDEF    shift, and go to state 8
    OP_NOT     shift, and go to state 51
    OP_MINUS   shift, and go to state 52
    MK_LPAREN  shift, and go to state 53
    RETURN     shift, and go to state 133

    $default  reduce using rule 18 (block)

    block                 go to state 134
    decl                  go to state 135
    type                  go to state 25
    typedef               go to state 13
    typedef_decl          go to state 136
    struct_def            go to state 14
    statement             go to state 137
    expression_statement  go to state 138
    assignment_statement  go to state 139
    assignment            go to state 140
    function_call         go to state 54
    expression            go to state 141
    and_op_res            go to state 56
    comp_op_res           go to state 57
    add_op_res            go to state 58
    mul_op_res            go to state 59
    unary_op_res          go to state 60
    factor                go to state 61
    var                   go to state 142
    array                 go to state 63
    struct_ref            go to state 64
    control_statement     go to state 143
    if_statement          go to state 144
    for_statement         go to state 145
    while_statement       go to state 146


State 119

    7 function_decl: type ID MK_LPAREN parameter_list MK_RPAREN MK_SEMICOLON .

    $default  reduce using rule 7 (function_decl)


State 120

   10 parameter_tail: MK_COMMA parameter . parameter_tail

    MK_COMMA  shift, and go to state 100

    $default  reduce using rule 11 (parameter_tail)

    parameter_tail  go to state 147


State 121

   13 parameter_bracket_chain: MK_LB . MK_RB bracket_chain
   23 bracket_chain: MK_LB . NUM_INT MK_RB bracket_chain

    NUM_INT  shift, and go to state 65
    MK_RB    shift, and go to state 148


State 122

   12 parameter: type ID parameter_bracket_chain .

    $default  reduce using rule 12 (parameter)


State 123

   14 parameter_bracket_chain: bracket_chain .

    $default  reduce using rule 14 (parameter_bracket_chain)


State 124

   26 id_tail: MK_COMMA ID bracket_chain . id_tail

    MK_COMMA  shift, and go to state 69

    $default  reduce using rule 27 (id_tail)

    id_tail  go to state 149


State 125

   50 reference_bracket_chain: MK_LB expression MK_RB . reference_bracket_chain
   51                        | MK_LB expression MK_RB .

    MK_LB  shift, and go to state 74

    $default  reduce using rule 51 (reference_bracket_chain)

    reference_bracket_chain  go to state 150


State 126

   52 function_call: ID MK_LPAREN expression_list MK_RPAREN .

    $default  reduce using rule 52 (function_call)


State 127

   55 expression_tail: MK_COMMA . expression expression_tail

    ID         shift, and go to state 47
    NUM_INT    shift, and go to state 48
    NUM_FLOAT  shift, and go to state 49
    STRING     shift, and go to state 50
    OP_NOT     shift, and go to state 51
    OP_MINUS   shift, and go to state 52
    MK_LPAREN  shift, and go to state 53

    function_call  go to state 54
    expression     go to state 151
    and_op_res     go to state 56
    comp_op_res    go to state 57
    add_op_res     go to state 58
    mul_op_res     go to state 59
    unary_op_res   go to state 60
    factor         go to state 61
    var            go to state 62
    array          go to state 63
    struct_ref     go to state 64


State 128

   53 expression_list: expression expression_tail .

    $default  reduce using rule 53 (expression_list)


State 129

   32 typedef_decl: ID . id_list MK_SEMICOLON
   52 function_call: ID . MK_LPAREN expression_list MK_RPAREN
   76 var: ID .
   79 array: ID . reference_bracket_chain
   80 struct_ref: ID . MK_DOT ID
   81           | ID . MK_DOT array

    ID         shift, and go to state 28
    MK_LB      shift, and go to state 74
    MK_LPAREN  shift, and go to state 75
    MK_DOT     shift, and go to state 76

    $default  reduce using rule 76 (var)

    id_list                  go to state 39
    reference_bracket_chain  go to state 77


State 130

   97 if_statement: IF . MK_LPAREN expression MK_RPAREN MK_LBRACE block MK_RBRACE if_tail

    MK_LPAREN  shift, and go to state 152


State 131

  101 while_statement: WHILE . MK_LPAREN expression_list MK_RPAREN MK_LBRACE block MK_RBRACE

    MK_LPAREN  shift, and go to state 153


State 132

  100 for_statement: FOR . MK_LPAREN assignment_statement expression_statement assignment MK_RPAREN MK_LBRACE block MK_RBRACE

    MK_LPAREN  shift, and go to state 154


State 133

   45 statement: RETURN . MK_SEMICOLON
   46          | RETURN . expression MK_SEMICOLON

    ID            shift, and go to state 47
    NUM_INT       shift, and go to state 48
    NUM_FLOAT     shift, and go to state 49
    STRING        shift, and go to state 50
    OP_NOT        shift, and go to state 51
    OP_MINUS      shift, and go to state 52
    MK_LPAREN     shift, and go to state 53
    MK_SEMICOLON  shift, and go to state 155

    function_call  go to state 54
    expression     go to state 156
    and_op_res     go to state 56
    comp_op_res    go to state 57
    add_op_res     go to state 58
    mul_op_res     go to state 59
    unary_op_res   go to state 60
    factor         go to state 61
    var            go to state 62
    array          go to state 63
    struct_ref     go to state 64


State 134

    6 function_decl: type ID MK_LPAREN parameter_list MK_RPAREN MK_LBRACE block . MK_RBRACE

    MK_RBRACE  shift, and go to state 157


State 135

   15 block: decl . block

    ID         shift, and go to state 129
    NUM_INT    shift, and go to state 48
    NUM_FLOAT  shift, and go to state 49
    STRING     shift, and go to state 50
    VOID       shift, and go to state 4
    INT        shift, and go to state 5
    FLOAT      shift, and go to state 6
    IF         shift, and go to state 130
    WHILE      shift, and go to state 131
    FOR        shift, and go to state 132
    STRUCT     shift, and go to state 7
    TYPEDEF    shift, and go to state 8
    OP_NOT     shift, and go to state 51
    OP_MINUS   shift, and go to state 52
    MK_LPAREN  shift, and go to state 53
    RETURN     shift, and go to state 133

    $default  reduce using rule 18 (block)

    block                 go to state 158
    decl                  go to state 135
    type                  go to state 25
    typedef               go to state 13
    typedef_decl          go to state 136
    struct_def            go to state 14
    statement             go to state 137
    expression_statement  go to state 138
    assignment_statement  go to state 139
    assignment            go to state 140
    function_call         go to state 54
    expression            go to state 141
    and_op_res            go to state 56
    comp_op_res           go to state 57
    add_op_res            go to state 58
    mul_op_res            go to state 59
    unary_op_res          go to state 60
    factor                go to state 61
    var                   go to state 142
    array                 go to state 63
    struct_ref            go to state 64
    control_statement     go to state 143
    if_statement          go to state 144
    for_statement         go to state 145
    while_statement       go to state 146


State 136

   16 block: typedef_decl . block

    ID         shift, and go to state 129
    NUM_INT    shift, and go to state 48
    NUM_FLOAT  shift, and go to state 49
    STRING     shift, and go to state 50
    VOID       shift, and go to state 4
    INT        shift, and go to state 5
    FLOAT      shift, and go to state 6
    IF         shift, and go to state 130
    WHILE      shift, and go to state 131
    FOR        shift, and go to state 132
    STRUCT     shift, and go to state 7
    TYPEDEF    shift, and go to state 8
    OP_NOT     shift, and go to state 51
    OP_MINUS   shift, and go to state 52
    MK_LPAREN  shift, and go to state 53
    RETURN     shift, and go to state 133

    $default  reduce using rule 18 (block)

    block                 go to state 159
    decl                  go to state 135
    type                  go to state 25
    typedef               go to state 13
    typedef_decl          go to state 136
    struct_def            go to state 14
    statement             go to state 137
    expression_statement  go to state 138
    assignment_statement  go to state 139
    assignment            go to state 140
    function_call         go to state 54
    expression            go to state 141
    and_op_res            go to state 56
    comp_op_res           go to state 57
    add_op_res            go to state 58
    mul_op_res            go to state 59
    unary_op_res          go to state 60
    factor                go to state 61
    var                   go to state 142
    array                 go to state 63
    struct_ref            go to state 64
    control_statement     go to state 143
    if_statement          go to state 144
    for_statement         go to state 145
    while_statement       go to state 146


State 137

   17 block: statement . block

    ID         shift, and go to state 129
    NUM_INT    shift, and go to state 48
    NUM_FLOAT  shift, and go to state 49
    STRING     shift, and go to state 50
    VOID       shift, and go to state 4
    INT        shift, and go to state 5
    FLOAT      shift, and go to state 6
    IF         shift, and go to state 130
    WHILE      shift, and go to state 131
    FOR        shift, and go to state 132
    STRUCT     shift, and go to state 7
    TYPEDEF    shift, and go to state 8
    OP_NOT     shift, and go to state 51
    OP_MINUS   shift, and go to state 52
    MK_LPAREN  shift, and go to state 53
    RETURN     shift, and go to state 133

    $default  reduce using rule 18 (block)

    block                 go to state 160
    decl                  go to state 135
    type                  go to state 25
    typedef               go to state 13
    typedef_decl          go to state 136
    struct_def            go to state 14
    statement             go to state 137
    expression_statement  go to state 138
    assignment_statement  go to state 139
    assignment            go to state 140
    function_call         go to state 54
    expression            go to state 141
    and_op_res            go to state 56
    comp_op_res           go to state 57
    add_op_res            go to state 58
    mul_op_res            go to state 59
    unary_op_res          go to state 60
    factor                go to state 61
    var                   go to state 142
    array                 go to state 63
    struct_ref            go to state 64
    control_statement     go to state 143
    if_statement          go to state 144
    for_statement         go to state 145
    while_statement       go to state 146


State 138

   42 statement: expression_statement .

    $default  reduce using rule 42 (statement)


State 139

   43 statement: assignment_statement .

    $default  reduce using rule 43 (statement)


State 140

   48 assignment_statement: assignment . MK_SEMICOLON

    MK_SEMICOLON  shift, and go to state 161


State 141

   47 expression_statement: expression . MK_SEMICOLON
   57 expression: expression . OP_OR and_op_res

    OP_OR         shift, and go to state 81
    MK_SEMICOLON  shift, and go to state 162


State 142

   49 assignment: var . OP_ASSIGN expression
   73 factor: var .

    OP_ASSIGN  shift, and go to state 163

    $default  reduce using rule 73 (factor)


State 143

   44 statement: control_statement .

    $default  reduce using rule 44 (statement)


State 144

   94 control_statement: if_statement .

    $default  reduce using rule 94 (control_statement)


State 145

   95 control_statement: for_statement .

    $default  reduce using rule 95 (control_statement)


State 146

   96 control_statement: while_statement .

    $default  reduce using rule 96 (control_statement)


State 147

   10 parameter_tail: MK_COMMA parameter parameter_tail .

    $default  reduce using rule 10 (parameter_tail)


State 148

   13 parameter_bracket_chain: MK_LB MK_RB . bracket_chain

    MK_LB  shift, and go to state 33

    $default  reduce using rule 24 (bracket_chain)

    bracket_chain  go to state 164


State 149

   26 id_tail: MK_COMMA ID bracket_chain id_tail .

    $default  reduce using rule 26 (id_tail)


State 150

   50 reference_bracket_chain: MK_LB expression MK_RB reference_bracket_chain .

    $default  reduce using rule 50 (reference_bracket_chain)


State 151

   55 expression_tail: MK_COMMA expression . expression_tail
   57 expression: expression . OP_OR and_op_res

    OP_OR     shift, and go to state 81
    MK_COMMA  shift, and go to state 127

    $default  reduce using rule 56 (expression_tail)

    expression_tail  go to state 165


State 152

   97 if_statement: IF MK_LPAREN . expression MK_RPAREN MK_LBRACE block MK_RBRACE if_tail

    ID         shift, and go to state 47
    NUM_INT    shift, and go to state 48
    NUM_FLOAT  shift, and go to state 49
    STRING     shift, and go to state 50
    OP_NOT     shift, and go to state 51
    OP_MINUS   shift, and go to state 52
    MK_LPAREN  shift, and go to state 53

    function_call  go to state 54
    expression     go to state 166
    and_op_res     go to state 56
    comp_op_res    go to state 57
    add_op_res     go to state 58
    mul_op_res     go to state 59
    unary_op_res   go to state 60
    factor         go to state 61
    var            go to state 62
    array          go to state 63
    struct_ref     go to state 64


State 153

  101 while_statement: WHILE MK_LPAREN . expression_list MK_RPAREN MK_LBRACE block MK_RBRACE

    ID         shift, and go to state 47
    NUM_INT    shift, and go to state 48
    NUM_FLOAT  shift, and go to state 49
    STRING     shift, and go to state 50
    OP_NOT     shift, and go to state 51
    OP_MINUS   shift, and go to state 52
    MK_LPAREN  shift, and go to state 53

    $default  reduce using rule 54 (expression_list)

    function_call    go to state 54
    expression_list  go to state 167
    expression       go to state 106
    and_op_res       go to state 56
    comp_op_res      go to state 57
    add_op_res       go to state 58
    mul_op_res       go to state 59
    unary_op_res     go to state 60
    factor           go to state 61
    var              go to state 62
    array            go to state 63
    struct_ref       go to state 64


State 154

  100 for_statement: FOR MK_LPAREN . assignment_statement expression_statement assignment MK_RPAREN MK_LBRACE block MK_RBRACE

    ID  shift, and go to state 168

    assignment_statement  go to state 169
    assignment            go to state 140
    var                   go to state 170
    array                 go to state 63
    struct_ref            go to state 64


State 155

   45 statement: RETURN MK_SEMICOLON .

    $default  reduce using rule 45 (statement)


State 156

   46 statement: RETURN expression . MK_SEMICOLON
   57 expression: expression . OP_OR and_op_res

    OP_OR         shift, and go to state 81
    MK_SEMICOLON  shift, and go to state 171


State 157

    6 function_decl: type ID MK_LPAREN parameter_list MK_RPAREN MK_LBRACE block MK_RBRACE .

    $default  reduce using rule 6 (function_decl)


State 158

   15 block: decl block .

    $default  reduce using rule 15 (block)


State 159

   16 block: typedef_decl block .

    $default  reduce using rule 16 (block)


State 160

   17 block: statement block .

    $default  reduce using rule 17 (block)


State 161

   48 assignment_statement: assignment MK_SEMICOLON .

    $default  reduce using rule 48 (assignment_statement)


State 162

   47 expression_statement: expression MK_SEMICOLON .

    $default  reduce using rule 47 (expression_statement)


State 163

   49 assignment: var OP_ASSIGN . expression

    ID         shift, and go to state 47
    NUM_INT    shift, and go to state 48
    NUM_FLOAT  shift, and go to state 49
    STRING     shift, and go to state 50
    OP_NOT     shift, and go to state 51
    OP_MINUS   shift, and go to state 52
    MK_LPAREN  shift, and go to state 53

    function_call  go to state 54
    expression     go to state 172
    and_op_res     go to state 56
    comp_op_res    go to state 57
    add_op_res     go to state 58
    mul_op_res     go to state 59
    unary_op_res   go to state 60
    factor         go to state 61
    var            go to state 62
    array          go to state 63
    struct_ref     go to state 64


State 164

   13 parameter_bracket_chain: MK_LB MK_RB bracket_chain .

    $default  reduce using rule 13 (parameter_bracket_chain)


State 165

   55 expression_tail: MK_COMMA expression expression_tail .

    $default  reduce using rule 55 (expression_tail)


State 166

   57 expression: expression . OP_OR and_op_res
   97 if_statement: IF MK_LPAREN expression . MK_RPAREN MK_LBRACE block MK_RBRACE if_tail

    OP_OR      shift, and go to state 81
    MK_RPAREN  shift, and go to state 173


State 167

  101 while_statement: WHILE MK_LPAREN expression_list . MK_RPAREN MK_LBRACE block MK_RBRACE

    MK_RPAREN  shift, and go to state 174


State 168

   76 var: ID .
   79 array: ID . reference_bracket_chain
   80 struct_ref: ID . MK_DOT ID
   81           | ID . MK_DOT array

    MK_LB   shift, and go to state 74
    MK_DOT  shift, and go to state 76

    $default  reduce using rule 76 (var)

    reference_bracket_chain  go to state 77


State 169

  100 for_statement: FOR MK_LPAREN assignment_statement . expression_statement assignment MK_RPAREN MK_LBRACE block MK_RBRACE

    ID         shift, and go to state 47
    NUM_INT    shift, and go to state 48
    NUM_FLOAT  shift, and go to state 49
    STRING     shift, and go to state 50
    OP_NOT     shift, and go to state 51
    OP_MINUS   shift, and go to state 52
    MK_LPAREN  shift, and go to state 53

    expression_statement  go to state 175
    function_call         go to state 54
    expression            go to state 141
    and_op_res            go to state 56
    comp_op_res           go to state 57
    add_op_res            go to state 58
    mul_op_res            go to state 59
    unary_op_res          go to state 60
    factor                go to state 61
    var                   go to state 62
    array                 go to state 63
    struct_ref            go to state 64


State 170

   49 assignment: var . OP_ASSIGN expression

    OP_ASSIGN  shift, and go to state 163


State 171

   46 statement: RETURN expression MK_SEMICOLON .

    $default  reduce using rule 46 (statement)


State 172

   49 assignment: var OP_ASSIGN expression .
   57 expression: expression . OP_OR and_op_res

    OP_OR  shift, and go to state 81

    $default  reduce using rule 49 (assignment)


State 173

   97 if_statement: IF MK_LPAREN expression MK_RPAREN . MK_LBRACE block MK_RBRACE if_tail

    MK_LBRACE  shift, and go to state 176


State 174

  101 while_statement: WHILE MK_LPAREN expression_list MK_RPAREN . MK_LBRACE block MK_RBRACE

    MK_LBRACE  shift, and go to state 177


State 175

  100 for_statement: FOR MK_LPAREN assignment_statement expression_statement . assignment MK_RPAREN MK_LBRACE block MK_RBRACE

    ID  shift, and go to state 168

    assignment  go to state 178
    var         go to state 170
    array       go to state 63
    struct_ref  go to state 64


State 176

   97 if_statement: IF MK_LPAREN expression MK_RPAREN MK_LBRACE . block MK_RBRACE if_tail

    ID         shift, and go to state 129
    NUM_INT    shift, and go to state 48
    NUM_FLOAT  shift, and go to state 49
    STRING     shift, and go to state 50
    VOID       shift, and go to state 4
    INT        shift, and go to state 5
    FLOAT      shift, and go to state 6
    IF         shift, and go to state 130
    WHILE      shift, and go to state 131
    FOR        shift, and go to state 132
    STRUCT     shift, and go to state 7
    TYPEDEF    shift, and go to state 8
    OP_NOT     shift, and go to state 51
    OP_MINUS   shift, and go to state 52
    MK_LPAREN  shift, and go to state 53
    RETURN     shift, and go to state 133

    $default  reduce using rule 18 (block)

    block                 go to state 179
    decl                  go to state 135
    type                  go to state 25
    typedef               go to state 13
    typedef_decl          go to state 136
    struct_def            go to state 14
    statement             go to state 137
    expression_statement  go to state 138
    assignment_statement  go to state 139
    assignment            go to state 140
    function_call         go to state 54
    expression            go to state 141
    and_op_res            go to state 56
    comp_op_res           go to state 57
    add_op_res            go to state 58
    mul_op_res            go to state 59
    unary_op_res          go to state 60
    factor                go to state 61
    var                   go to state 142
    array                 go to state 63
    struct_ref            go to state 64
    control_statement     go to state 143
    if_statement          go to state 144
    for_statement         go to state 145
    while_statement       go to state 146


State 177

  101 while_statement: WHILE MK_LPAREN expression_list MK_RPAREN MK_LBRACE . block MK_RBRACE

    ID         shift, and go to state 129
    NUM_INT    shift, and go to state 48
    NUM_FLOAT  shift, and go to state 49
    STRING     shift, and go to state 50
    VOID       shift, and go to state 4
    INT        shift, and go to state 5
    FLOAT      shift, and go to state 6
    IF         shift, and go to state 130
    WHILE      shift, and go to state 131
    FOR        shift, and go to state 132
    STRUCT     shift, and go to state 7
    TYPEDEF    shift, and go to state 8
    OP_NOT     shift, and go to state 51
    OP_MINUS   shift, and go to state 52
    MK_LPAREN  shift, and go to state 53
    RETURN     shift, and go to state 133

    $default  reduce using rule 18 (block)

    block                 go to state 180
    decl                  go to state 135
    type                  go to state 25
    typedef               go to state 13
    typedef_decl          go to state 136
    struct_def            go to state 14
    statement             go to state 137
    expression_statement  go to state 138
    assignment_statement  go to state 139
    assignment            go to state 140
    function_call         go to state 54
    expression            go to state 141
    and_op_res            go to state 56
    comp_op_res           go to state 57
    add_op_res            go to state 58
    mul_op_res            go to state 59
    unary_op_res          go to state 60
    factor                go to state 61
    var                   go to state 142
    array                 go to state 63
    struct_ref            go to state 64
    control_statement     go to state 143
    if_statement          go to state 144
    for_statement         go to state 145
    while_statement       go to state 146


State 178

  100 for_statement: FOR MK_LPAREN assignment_statement expression_statement assignment . MK_RPAREN MK_LBRACE block MK_RBRACE

    MK_RPAREN  shift, and go to state 181


State 179

   97 if_statement: IF MK_LPAREN expression MK_RPAREN MK_LBRACE block . MK_RBRACE if_tail

    MK_RBRACE  shift, and go to state 182


State 180

  101 while_statement: WHILE MK_LPAREN expression_list MK_RPAREN MK_LBRACE block . MK_RBRACE

    MK_RBRACE  shift, and go to state 183


State 181

  100 for_statement: FOR MK_LPAREN assignment_statement expression_statement assignment MK_RPAREN . MK_LBRACE block MK_RBRACE

    MK_LBRACE  shift, and go to state 184


State 182

   97 if_statement: IF MK_LPAREN expression MK_RPAREN MK_LBRACE block MK_RBRACE . if_tail

    ELSE  shift, and go to state 185

    $default  reduce using rule 99 (if_tail)

    if_tail  go to state 186


State 183

  101 while_statement: WHILE MK_LPAREN expression_list MK_RPAREN MK_LBRACE block MK_RBRACE .

    $default  reduce using rule 101 (while_statement)


State 184

  100 for_statement: FOR MK_LPAREN assignment_statement expression_statement assignment MK_RPAREN MK_LBRACE . block MK_RBRACE

    ID         shift, and go to state 129
    NUM_INT    shift, and go to state 48
    NUM_FLOAT  shift, and go to state 49
    STRING     shift, and go to state 50
    VOID       shift, and go to state 4
    INT        shift, and go to state 5
    FLOAT      shift, and go to state 6
    IF         shift, and go to state 130
    WHILE      shift, and go to state 131
    FOR        shift, and go to state 132
    STRUCT     shift, and go to state 7
    TYPEDEF    shift, and go to state 8
    OP_NOT     shift, and go to state 51
    OP_MINUS   shift, and go to state 52
    MK_LPAREN  shift, and go to state 53
    RETURN     shift, and go to state 133

    $default  reduce using rule 18 (block)

    block                 go to state 187
    decl                  go to state 135
    type                  go to state 25
    typedef               go to state 13
    typedef_decl          go to state 136
    struct_def            go to state 14
    statement             go to state 137
    expression_statement  go to state 138
    assignment_statement  go to state 139
    assignment            go to state 140
    function_call         go to state 54
    expression            go to state 141
    and_op_res            go to state 56
    comp_op_res           go to state 57
    add_op_res            go to state 58
    mul_op_res            go to state 59
    unary_op_res          go to state 60
    factor                go to state 61
    var                   go to state 142
    array                 go to state 63
    struct_ref            go to state 64
    control_statement     go to state 143
    if_statement          go to state 144
    for_statement         go to state 145
    while_statement       go to state 146


State 185

   98 if_tail: ELSE . MK_LBRACE block MK_RBRACE

    MK_LBRACE  shift, and go to state 188


State 186

   97 if_statement: IF MK_LPAREN expression MK_RPAREN MK_LBRACE block MK_RBRACE if_tail .

    $default  reduce using rule 97 (if_statement)


State 187

  100 for_statement: FOR MK_LPAREN assignment_statement expression_statement assignment MK_RPAREN MK_LBRACE block . MK_RBRACE

    MK_RBRACE  shift, and go to state 189


State 188

   98 if_tail: ELSE MK_LBRACE . block MK_RBRACE

    ID         shift, and go to state 129
    NUM_INT    shift, and go to state 48
    NUM_FLOAT  shift, and go to state 49
    STRING     shift, and go to state 50
    VOID       shift, and go to state 4
    INT        shift, and go to state 5
    FLOAT      shift, and go to state 6
    IF         shift, and go to state 130
    WHILE      shift, and go to state 131
    FOR        shift, and go to state 132
    STRUCT     shift, and go to state 7
    TYPEDEF    shift, and go to state 8
    OP_NOT     shift, and go to state 51
    OP_MINUS   shift, and go to state 52
    MK_LPAREN  shift, and go to state 53
    RETURN     shift, and go to state 133

    $default  reduce using rule 18 (block)

    block                 go to state 190
    decl                  go to state 135
    type                  go to state 25
    typedef               go to state 13
    typedef_decl          go to state 136
    struct_def            go to state 14
    statement             go to state 137
    expression_statement  go to state 138
    assignment_statement  go to state 139
    assignment            go to state 140
    function_call         go to state 54
    expression            go to state 141
    and_op_res            go to state 56
    comp_op_res           go to state 57
    add_op_res            go to state 58
    mul_op_res            go to state 59
    unary_op_res          go to state 60
    factor                go to state 61
    var                   go to state 142
    array                 go to state 63
    struct_ref            go to state 64
    control_statement     go to state 143
    if_statement          go to state 144
    for_statement         go to state 145
    while_statement       go to state 146


State 189

  100 for_statement: FOR MK_LPAREN assignment_statement expression_statement assignment MK_RPAREN MK_LBRACE block MK_RBRACE .

    $default  reduce using rule 100 (for_statement)


State 190

   98 if_tail: ELSE MK_LBRACE block . MK_RBRACE

    MK_RBRACE  shift, and go to state 191


State 191

   98 if_tail: ELSE MK_LBRACE block MK_RBRACE .

    $default  reduce using rule 98 (if_tail)
